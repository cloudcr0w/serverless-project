name: Serverless CI/CD

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Check Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Run JavaScript Linter
        run: |
          npm install eslint -g
          eslint app.js --fix || true

  test-backend:
    name: Run Lambda unit tests
    runs-on: ubuntu-latest
    env: 
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install test dependencies
        run: |
          cd terraform
          pip install -r requirements-dev.txt

      - name: Run pytest
        env:
          AWS_REGION: us-east-1
        run: |
          cd terraform
          PYTHONPATH=. pytest tests/

  terraform:
    name: Validate & Deploy Terraform
    needs: [lint, test-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Format Check
        run: terraform fmt -check
        working-directory: terraform

      - name: Zip Lambda function
        run: |
          zip modules/lambda/lambda.zip lambda_function.py
        working-directory: terraform

      - name: Zip Slack Alert Forwarder Lambda
        run: |
          cd modules/slack_forwarder/lambda
          zip slack_alert_forwarder.zip slack_alert_forwarder.py
        working-directory: terraform

      - name: Upload Slack ZIP to S3
        run: |
          aws s3 cp modules/slack_forwarder/lambda/slack_alert_forwarder.zip s3://adamwrona-serverless-frontend/lambda/slack_alert_forwarder.zip
        working-directory: terraform

      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}"
        working-directory: terraform
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform-debug.log

      - name: Apply Terraform Changes
        run: terraform apply -auto-approve -var="slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}"
        working-directory: terraform

  deploy-frontend:
    name: Deploy Frontend to S3
    needs: [lint, terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload frontend to S3
        run: aws s3 sync . s3://adamwrona-serverless-frontend/ --exclude "terraform/*"

  deploy-lambda:
    name: Deploy AWS Lambda
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Package Lambda
        run: |
          cd terraform
          zip -j modules/lambda/lambda.zip lambda_function.py

      - name: Deploy Lambda
        run: |
          aws lambda update-function-code --function-name serverless-backend --zip-file fileb://terraform/modules/lambda/lambda.zip
          
      - name: Verify API after deployment
        run: |
          sleep 5 
          curl -X GET https://uij5hsagih.execute-api.us-east-1.amazonaws.com/dev/tasks || {
          echo "‚ùå API check failed!";
          exit 1;
          }
